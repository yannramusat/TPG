#!/bin/env python3

from app import App
from structures import InputRelation, InputSchema, TransformationRule, Scenario

if __name__ == "__main__":
    # app setup
    scheme = "bolt"
    hostname = "localhost"
    port = "7687"
    uri = f"{scheme}://{hostname}:{port}"
    app = App(uri, "neo4j", verbose=False)

    # common prefix for CSVs; the data has been generated by ibench
    prefix = "file:///home/yann/research/ibench/build/ibench/"

    ## building scenario
    # csv#1
    rel_address_cmd = "MERGE (n:Address {zip: row[1], city: row[2]})"
    rel_address = InputRelation(prefix+"personaddress/address100-5.csv", rel_address_cmd)
    # csv#2
    rel_person_cmd = "MERGE (n:Person {name: row[1], address: row[2]})"
    rel_person = InputRelation(prefix+"personaddress/person100-5.csv", rel_person_cmd)
    # source schema
    source_schema = InputSchema([rel_address, rel_person])
    # rule#1
    rule1 = TransformationRule("""
    MATCH (a:Address)
    MERGE (x:Person2 { _id: "(Person2:" + a.zip + "," + a.city + ")", address: a.zip })
    MERGE (y:Address2 { _id: "(Address2:" + elementId(a) + ")", zip: a.zip, city: a.city})
    MERGE (x)-[v:livesAt {
        _id: "(livesAt:" + elementId(x) + "," + elementId(y) + ")"
    }]->(y)
    """)
    # rule#2
    rule2 = TransformationRule("""
    MATCH (p:Person)
    MATCH (a:Address)
    WHERE p.address = a.zip
    MERGE (x:Person2 { _id: "(Person2:" + elementId(p) + ")", name: p.name, address: p.address })
    MERGE (y:Address2 { _id: "(Address2:" + elementId(a) + ")" , zip: a.zip, city: a.city})
    MERGE (x)-[v:livesAt {
        _id: "(livesAt:" + elementId(x) + "," + elementId(y) + ")"
    }]->(y)
    """)
    ## running scenario
    launches = 5
    ttime = 0.0
    scenario_personaddress = Scenario(source_schema, [rule1, rule2])
    for i in range(launches):
        scenario_personaddress.prepare(app)
        ttime += scenario_personaddress.transform(app)
    print(f"The transformation has averaged {ttime / launches} ms over {launches} runs.")

    # close connection
    app.close()
