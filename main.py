#!/bin/env python3
from app import App
import figures

if __name__ == "__main__":
    # app setup
    scheme = "bolt"
    hostname = "localhost"
    port = "7687"
    uri = f"{scheme}://{hostname}:{port}"
    app = App(uri, "neo4j", verbose=False)

    # common prefix for CSVs; the data has been generated by iBench
    prefix = "file:///home/yann/research/ibench/build/ibench/"
    nbLaunches = 3
    showStats = True
    nodeIndexes = True
    relIndexes = True
    x = [100, 200]#, 500, 1_000] #, 2_000, 5_000, 10_000, 20_000, 50_000, 100_000]
    y = [100, 200, 500]#, 1_000, 2_000, 5_000, 10_000] #, 20_000, 50_000, 100_000] 
    # choose which figures to use and their parameters
    from figures.personaddress import *
    figures = [
        FigureComparisonIndexesPersonAddress(app, prefix=prefix, values=x, nbLaunches=nbLaunches, showStats=showStats),
        FigureComparisonAlternativeApproachesPersonAddress(app, prefix=prefix, values=y, nbLaunches=nbLaunches, showStats=showStats)
    ]
    # launch experiments    
    for fig in figures:
        fig.compute()
    # print results into cmdline
    if showStats:
        for fig in figures:
            fig.print_cmd()
    # generate figures
    for fig in figures:
        fig.plot()
    # show all figures using matplotlib
    import matplotlib.pyplot as plt
    import numpy as np
    plt.show()
 
    # TEMPORARY BREAK POINT
    exit()

    # execute the Optimized alternative implementation of the scenario FlightHotel
    from scenarios.flighthotel import FlightHotelScenarioSeparateIndexes
    resultsOptiFH = []
    for i in x:
        scenario = FlightHotelScenarioSeparateIndexes(prefix, size=i)
        resultsOptiFH.append(scenario.run(app, launches=nbLaunches, stats=showStats, nodeIndex=True, relIndex=True))

    # execute the Optimized alternative implementation of the scenario FlightHotel (without Indexes!)
    resultsNoIndexFH = []
    for i in x:
        scenario = FlightHotelScenarioSeparateIndexes(prefix, size=i)
        resultsNoIndexFH.append(scenario.run(app, launches=nbLaunches, stats=showStats, nodeIndex=False, relIndex=False))

    # optional printing of the results in the console
    if showStats:
        print(resultsOptiFH)
        print(resultsNoIndexFH)
   
    #####
    # TEMPORARY PLOTTING
    import matplotlib.pyplot as plt
    import numpy as np

    fig, ax = plt.subplots(layout="constrained")
    ax.plot(x, resultsOptiFH, label="Optimized")
    ax.plot(x, resultsNoIndexFH, label="Without indexes")
    ax.set_title("$\mathtt{FlightHotel}$ scenario")
    ax.set_xlabel("cardinality of input relations")
    ax.set_ylabel("time [ms]")
    ax.set_yscale("log")
    ax.legend()
    plt.show()
    #####

    # close connection
    app.close()
