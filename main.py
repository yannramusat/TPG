#!/bin/env python3

from app import App

class InputRelation(object):
    def __init__(self, path_to_csv_file, mergeCMD):
        self.file = path_to_csv_file
        self.mergeCMD = mergeCMD

    def populate(self):
        app.populate_with_csv(self.file, self.mergeCMD)

class InputSchema(object):
    def __init__(self, input_relations):
        self.relations = input_relations

    def instanciate(self):
        for rel in self.relations:
            rel.populate()

class TransformationRule(object):
    def __init__(self, query_str):
        self.query_str = query_str

    def apply(self):
        return app.query(self.query_str) 

class Scenario(object):
    def __init__(self, schema, rules):
        self.schema = schema
        self.rules = rules

    def prepare(self):
        app.flush_database()
        self.schema.instanciate()
        app.output_all_nodes()

    def transform(self):
        elapsed = 0
        for rule in self.rules:
            elapsed += rule.apply()
        print(f"The transformation has been executed in {elapsed} ms.")
        app.output_all_nodes()
        return elapsed

if __name__ == "__main__":
    # app setup
    scheme = "bolt"
    hostname = "localhost"
    port = "7687"
    uri = f"{scheme}://{hostname}:{port}"
    app = App(uri, "neo4j", verbose=False)

    # common prefix for CSVs; the data has been generated by ibench
    prefix = "file:///home/yann/research/ibench/build/ibench/"

    ## building scenario
    # csv#1
    rel_address_cmd = "MERGE (n:Address {zip: row[1], city: row[2]})"
    rel_address = InputRelation(prefix+"personaddress/address100-5.csv", rel_address_cmd)
    # csv#2
    rel_person_cmd = "MERGE (n:Person {name: row[1], address: row[2]})"
    rel_person = InputRelation(prefix+"personaddress/person100-5.csv", rel_person_cmd)
    # source schema
    source_schema = InputSchema([rel_address, rel_person])
    # rule#1
    rule1 = TransformationRule("""
    MATCH (a:Address)
    MERGE (x:Person2 { _id: "(Person2:" + a.zip + "," + a.city + ")", address: a.zip })
    MERGE (y:Address2 { _id: "(Address2:" + elementId(a) + ")", zip: a.zip, city: a.city})
    MERGE (x)-[v:livesAt {
        _id: "(livesAt:" + elementId(x) + "," + elementId(y) + ")"
    }]->(y)
    """)
    # rule#2
    rule2 = TransformationRule("""
    MATCH (p:Person)
    MATCH (a:Address)
    WHERE p.address = a.zip
    MERGE (x:Person2 { _id: "(Person2:" + elementId(p) + ")", name: p.name, address: p.address })
    MERGE (y:Address2 { _id: "(Address2:" + elementId(a) + ")" , zip: a.zip, city: a.city})
    MERGE (x)-[v:livesAt {
        _id: "(livesAt:" + elementId(x) + "," + elementId(y) + ")"
    }]->(y)
    """)
    ## running scenario
    launches = 100
    ttime = 0.0
    scenario_personaddress = Scenario(source_schema, [rule1, rule2])
    for i in range(launches):
        scenario_personaddress.prepare()
        ttime += scenario_personaddress.transform()
    print(f"The transformation has averaged {ttime / launches} ms over {launches} runs.")
    # close connection
    app.close()
